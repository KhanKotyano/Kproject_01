/*
u8 AssignFunctions(void(***_function_array)(Instance*), u16 _type){
  u8 f_size = 0;
  switch(_type){gfgfgf
    case PLAYER:{
      f_size = 1;
      *_function_array = (void(**)(Instance*))malloc(f_size * sizeof(void*));
      *_function_array[0] = &PlayerMain;

    }break;
    case ENEMY:{
    

    }break;
  }
  return f_size;
};
u8 AssignDrawFunctions(void(***_function_array)(Instance*), u16 _type){
  u8 f_size = 0;
  switch(_type){
    case PLAYER:{
      f_size = 1;
      *_function_array = (void(**)(Instance*))malloc( f_size * sizeof(void*));
      *_function_array[0] = &PlayerMainDraw;
      *_function_array[1] = &DrawAndAnimate;
     
      *_function_array[0] = &DrawSelf;

    }break;
    case ENEMY:{
      f_size = 1;
      *_function_array = (void(**)(Instance*))malloc(f_size * sizeof(void*));

    }break;
  }
  return f_size;
};
u8 AssignDrawGUIFunctions(void(***_function_array)(Instance*), u16 _type){
  u8 f_size = 0;
  switch(_type){
    case PLAYER:{
      f_size = 1;
      *_function_array = (void(**)(Instance*))malloc(f_size * sizeof(void*));
      *_function_array[0] = &PlayerMainDrawGui;
    }break;
    case ENEMY:{
      f_size = 1;
      *_function_array = (void(**)(Instance*))malloc(f_size * sizeof(void*));
      *_function_array[0] = &DrawAndAnimate;
    }break;
  }
  return f_size;
};
*/

/*int WorldAt(int x, int y, CellGrid2D *grid_struct)
{
  if (x >= 0 && x < grid_struct->width && y >= 0 && y < grid_struct->height) {
      return grid_struct->grid[y][x].exist;
  } else {
      return -1;
  }
}
void PathNodeNeighbors(ASNeighborList neighbors, void *node, void *context)
{
  (GridVector2D *)node;
  GridVector2D *pathNode = (GridVector2D*)malloc(sizeof(GridVector2D*));
  pathNode = ((GridVector2D *)node);
  GridVector2D n0 = (GridVector2D){pathNode->x+1, pathNode->y};
  GridVector2D n1 = (GridVector2D){pathNode->x-1, pathNode->y};
  GridVector2D n2 = (GridVector2D){pathNode->x, pathNode->y+1};
  GridVector2D n3 = (GridVector2D){pathNode->x, pathNode->y-1};

  if (WorldAt(pathNode->x+1, pathNode->y, (CellGrid2D*)context) == 1) {
      ASNeighborListAdd(neighbors, &n0, 1);
  }
  if (WorldAt(pathNode->x-1, pathNode->y, (CellGrid2D*)context) == 1) {
      ASNeighborListAdd(neighbors, &n1, 1);
  }
  if (WorldAt(pathNode->x, pathNode->y+1, (CellGrid2D*)context) == 1) {
      ASNeighborListAdd(neighbors, &n2, 1);
  }
  if (WorldAt(pathNode->x, pathNode->y-1, (CellGrid2D*)context) == 1) {
      ASNeighborListAdd(neighbors, &n3, 1);
  }
  free(pathNode);
}
float PathNodeHeuristic(void *fromNode, void *toNode, void *context)
{
    GridVector2D *from = (GridVector2D *)fromNode;
    GridVector2D *to = (GridVector2D *)toNode;

    // using the manhatten distance since this is a simple grid and you can only move in 4 directions
    return (fabs(from->x - to->x) + fabs(from->y - to->y));
}

ASPathNodeSource path_source = {
  .nodeSize = sizeof(GridVector2D),
  &PathNodeNeighbors,
  &PathNodeHeuristic,
  NULL,
  NULL
};*/
/*void AStar(NodeArray *open,NodeArray *closed, GridVector2D max_pos, ASNode *path_array, GridVector2D from_node, GridVector2D to_node){
  int x,y;
  *open->array = (ASNode(*))malloc(sizeof(ASNode** ) * (max_pos.x *max_pos.y));
  *closed->array = (ASNode(*))malloc(sizeof(ASNode** ) * (max_pos.x *max_pos.y));
  OpenNode(open, &path_array[from_node.x + (from_node.y * max_pos.x)] );
  
  while(open->used_size){
    unsigned int current_index = GetMaxFCost(open);

  }

  
  //      x0 x1 x2 x3 x4 x5
  //  y0: 00 01 02 03 04 05
  //  y1: 06 07 08 09 10 11
  //  y2: 12 13 14 15 16 17
  //  y3: 18 19 20 21 22 23
  
  

  for(int i =0; i < open->total_size;i++){
    free(open->array[i]);
  }
  free(open->array);
  for(int i =0; i < closed->total_size;i++){
    free(closed->array[i]);
  }
  free(closed->array);
  //free(closed->array);
}
*/